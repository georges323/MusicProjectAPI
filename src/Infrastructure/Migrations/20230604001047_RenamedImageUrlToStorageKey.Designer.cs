// <auto-generated />
using System;
using Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230604001047_RenamedImageUrlToStorageKey")]
    partial class RenamedImageUrlToStorageKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Bpm")
                        .HasMaxLength(999)
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TimeSig")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("865a0144-ce5d-44dd-a3ab-8d01723037c9"),
                            Bpm = 155,
                            Name = "Drowning",
                            TimeSig = "4/4"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("StorageKey")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a9c9a34-fc1e-4d78-98ad-fdf2c30b65a1"),
                            Name = "Guitar",
                            ProjectId = new Guid("865a0144-ce5d-44dd-a3ab-8d01723037c9")
                        },
                        new
                        {
                            Id = new Guid("96998219-aa89-4ae4-96e3-4e532e4f636e"),
                            Name = "Drums",
                            ProjectId = new Guid("865a0144-ce5d-44dd-a3ab-8d01723037c9")
                        },
                        new
                        {
                            Id = new Guid("7daa3c30-e3e0-4bf3-919b-cd78ff353e94"),
                            Name = "Vocals",
                            ProjectId = new Guid("865a0144-ce5d-44dd-a3ab-8d01723037c9")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Track", b =>
                {
                    b.HasOne("Domain.Entities.Project", null)
                        .WithMany("Tracks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
